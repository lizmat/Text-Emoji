=begin pod

=head1 NAME

Text::Emoji - provide :text: to emoji translation

=head1 SYNOPSIS

=begin code :lang<raku>

use Text::Emoji;

say to-emoji("I :heart: :beer:");  # I ‚ù§Ô∏è üç∫

say to-text(":I: ‚ù§Ô∏è üç∫");  # I :heart: :beer:

=end code

=head1 DESCRIPTION

The C<Text::Emoji> distribution contains information about transforming
C<:text:> to emoji transliteration.  As such it exports a number of
subroutines.

=head1 SUBROUTINES

=head2 to-emoji

=begin code :lang<raku>

say to-emoji("I :heart: :beer:");                     # I ‚ù§Ô∏è üç∫

say to-emoji("I :love: :beer:", :love<‚ù§Ô∏è>);           # I ‚ù§Ô∏è üç∫
say to-emoji("I :love: :beer:", :love<heart>);        # I ‚ù§Ô∏è üç∫
say to-emoji("I :love: :beer:", %(love => "‚ù§Ô∏è"));     # I ‚ù§Ô∏è üç∫
say to-emoji("I :love: :beer:", %(love => "heart"));  # I ‚ù§Ô∏è üç∫

say to-emoji("baby: :baby-bottle::babybottle:");  # baby: üçºüçº

=end code

The C<to-emoji> subroutine in its simplest form takes a string as the
first argument and attempt to transform any known emoji strings of the
form C<:word:> into the associated emoji.  Note that the word I<may>
contain hyphens, but they are optional.

Additional mapping info may be specified as additional named arguments,
or as a hash.  The value for each additional mapping may be either the
emoji directly, or the text equivalent of the emoji.

=head2 to-text

=begin code :lang<raku>

say to-text("I ‚ù§Ô∏è üç∫");                      # I :heart: :beer:
say to-text("I ‚ù§Ô∏è üç∫", :love<‚ù§Ô∏è>);           # I :love: :beer:
say to-text("I ‚ù§Ô∏è üç∫", :love<heart>);        # I :love: :beer:
say to-text("I ‚ù§Ô∏è üç∫", %(love => "‚ù§Ô∏è"));     # I :love: :beer:
say to-text("I ‚ù§Ô∏è üç∫", %(love => "heart"));  # I :love: :beer:

=end code

The C<to-text> subroutine in its simplest form takes a string as the
first argument and attempt to transform any known emojis to the shortest
possible C<:word:> form known for that emoji.

The same type of additional map information as can be specified with
C<to-emoji>, can be specified with C<to-text>.

=head2 raw-emoji-data

=begin code :lang<raku>

say raw-emoji-data<‚ù§Ô∏è>.keys;
# (aliases category description emoji ios_version tags unicode_version)

=end code

The C<raw-emoji-data> subroutine returns a C<Map>, keyed to the supported
emojis.  The value associated with is a C<Map> as well, which can be best
described by its JSON representation:

=begin output

{
  "emoji": "‚ù§Ô∏è",
  "description": "red heart",
  "category": "Smileys & Emotion",
  "aliases": [
    "heart"
  ],
  "tags": [
    "love"
  ],
  "unicode_version": "",
  "ios_version": "6.0"
}

=end output

=head1 INSPIRATION

Inspired by Simon Harms' L<C<Avolution::Emoji>|https://github.com/ukn-ubi/Avolution-Emoji>
module, but completely re-imagined from scratch using the table provided
by the L<C<gemoji>|https://github.com/github/gemoji> library.

=head1 AUTHOR

Elizabeth Mattijsen <liz@raku.rocks>

Source can be located at: https://github.com/lizmat/Text-Emoji . Comments
and Pull Requests are welcome.

If you like this module, or what I'm doing more generally, committing to a
L<small sponsorship|https://github.com/sponsors/lizmat/>  would mean a great
deal to me!

=head1 COPYRIGHT AND LICENSE

Copyright 2024 Elizabeth Mattijsen

This library is free software; you can redistribute it and/or modify it under the Artistic License 2.0.

=end pod

# vim: expandtab shiftwidth=4
